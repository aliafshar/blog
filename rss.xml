<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>jaspervdj - All posts</title>
    <link href="http://jaspervdj.be/rss.xml" rel="self" />
    <link href="http://jaspervdj.be" />
    <id>http://jaspervdj.be/rss.xml</id>
    <author>
        <name>Jasper Van der Jeugt</name>
        <email>jaspervdj@gmail.com</email>
    </author>
    <updated>2013-09-09T00:00:00Z</updated>
    <entry>
    <title>Buffered SHA1 in Dart with a StreamTransformer</title>
    <link href="http://jaspervdj.be/posts/2013-09-09-buffered-sha1-dart-streams.html" />
    <id>http://jaspervdj.be/posts/2013-09-09-buffered-sha1-dart-streams.html</id>
    <published>2013-09-09T00:00:00Z</published>
    <updated>2013-09-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve been hacking somewhat on a <a href="http://dartlang.org">Dart</a> client for <a href="http://camlistore.org/">Camlistore</a> recently, and as part of that I need to take a SHA1 hash of files. This is easy to do in Dart, as the <a href="http://api.dartlang.org/docs/bleeding_edge/crypto.html">Crypto</a> package takes care of me, and I can produce a simple implementation.</p>
<pre class="sourceCode java"><code class="sourceCode java">String <span class="fu">sha1</span>(List&lt;<span class="dt">int</span>&gt; bs) {
  <span class="dt">final</span> crypto.<span class="fu">SHA1</span> sha1 = <span class="kw">new</span> crypto.<span class="fu">SHA1</span>();
  sha1.<span class="fu">add</span>(bs);
  <span class="dt">final</span> hexdgst = crypto.<span class="fu">CryptoUtils</span>.<span class="fu">bytesToHex</span>(sha1.<span class="fu">close</span>());
  <span class="kw">return</span> &#39;sha1-${hexdgst}&#39;;
}

Future&lt;String&gt; <span class="fu">sha1File</span>(String filename) =&gt;
  <span class="kw">return</span> <span class="kw">new</span> File(filename).<span class="fu">readAsBytes</span>().<span class="fu">then</span>(sha1);

<span class="fu">sha1File</span>(&#39;/home/ali/banana.<span class="fu">png</span>&#39;).<span class="fu">then</span>(print);</code></pre>
<p>This is fine until I read a 2 gigabyte file. At that point, I need to buffer the loading. Dart streams to the rescue. You can read a file as a <code>Stream&lt;List&lt;int&gt;&gt;</code> and using a <code>StreamTransformer</code> can just convert that stream into a <code>Stream&lt;String&gt;</code> which is the SHA1.</p>
<pre class="sourceCode java"><code class="sourceCode java"><span class="fu">bufferedSha1Transformer</span>() {
  <span class="dt">final</span> sha1 = <span class="kw">new</span> crypto.<span class="fu">SHA1</span>();
  <span class="kw">return</span> <span class="kw">new</span> StreamTransformer&lt;List&lt;<span class="dt">int</span>&gt;, String&gt;(
    handleData: (List&lt;<span class="dt">int</span>&gt; value, EventSink&lt;String&gt; sink) {
      sha1.<span class="fu">add</span>(value);
    },
    handleDone: (EventSink&lt;String&gt; sink) {
      <span class="dt">final</span> dgst = crypto.<span class="fu">CryptoUtils</span>.<span class="fu">bytesToHex</span>(sha1.<span class="fu">close</span>());
      sink.<span class="fu">add</span>(&#39;sha1-${dgst}&#39;);
    }
  );
}

Stream&lt;String&gt; <span class="fu">sha1BufferedFile</span>(String filename) =&gt;
  <span class="kw">new</span> File(filename).<span class="fu">openRead</span>().<span class="fu">transform</span>(<span class="fu">bufferedSha1Transformer</span>());

<span class="fu">sha1BufferedFile</span>(&#39;/home/ali/banana.<span class="fu">png</span>&#39;).<span class="fu">listen</span>(print);</code></pre>
<p>The file is read in chunks of 65536 bytes, and added to the SHA1. When the file is finished the target stream (sink) emits the digest.</p>
<p>Neat, eh? I’ll admit until today I thought Dart streams were annoying, but now I am converted.</p>]]></summary>
</entry>
<entry>
    <title>The British Scale of Excellence</title>
    <link href="http://jaspervdj.be/posts/2013-07-29-scale-of-excellence.html" />
    <id>http://jaspervdj.be/posts/2013-07-29-scale-of-excellence.html</id>
    <published>2013-07-29T00:00:00Z</published>
    <updated>2013-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>As a Brit in California, I sometimes have trouble expressing myself or being understood. I’ve decided to publish my scale as a reference guide for those who might find it useful.</p>
<table>
<thead>
<tr class="header">
<th align="left"><code>en_US</code></th>
<th align="left"><code>en_GB</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Very bad</td>
<td align="left">Not entirely terrible</td>
</tr>
<tr class="even">
<td align="left">Bad</td>
<td align="left">Not too bad</td>
</tr>
<tr class="odd">
<td align="left">OK</td>
<td align="left">Not too bad at all</td>
</tr>
<tr class="even">
<td align="left">Good</td>
<td align="left">Not bad</td>
</tr>
<tr class="odd">
<td align="left">Very Good</td>
<td align="left">Not too shabby</td>
</tr>
</tbody>
</table>
<p>I hope that helps.</p>]]></summary>
</entry>
<entry>
    <title>Using Go as an HTTP+JSON client</title>
    <link href="http://jaspervdj.be/posts/2013-07-26-json-http-client-golang.html" />
    <id>http://jaspervdj.be/posts/2013-07-26-json-http-client-golang.html</id>
    <published>2013-07-26T00:00:00Z</published>
    <updated>2013-07-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Making HTTP calls from <a href="http://golang.org">Go</a> is really easy. I rather like the <a href="http://golang.org/pkg/net/http/">HTTP client</a> because it makes easy things easy, and is flexible enough to do more complicated things without pain. Straight from the documentation, making an HTTP request is as simple as knowing the verb and the URL that you want (minus some boilerplate).</p>
<pre class="sourceCode go"><code class="sourceCode go">resp, err := http.Get(url)</code></pre>
<p>Adding a header to our request is a bit more complex, but again well documented. We will be adding the <code>Accept</code> header with a value of <code>application/json</code>. We should create the client and request manually, and add the header.</p>
<pre class="sourceCode go"><code class="sourceCode go">client := &amp;http.Client{}
req, err := http.NewRequest(<span class="st">&quot;GET&quot;</span>, url, <span class="ot">nil</span>)
<span class="kw">if</span> err != <span class="ot">nil</span> {
  log.Fatalln(err)
}
req.Header.Add(<span class="st">&quot;Accept&quot;</span>, <span class="st">&quot;application/json&quot;</span>)</code></pre>
<p>We can then make the request. Defer is an unbelievably cool and pragmatic Go feature which executes a list of things <a href="http://blog.golang.org/defer-panic-and-recover">after a function returns</a>.</p>
<pre class="sourceCode go"><code class="sourceCode go">resp, err := client.Do(req)
<span class="kw">if</span> err != <span class="ot">nil</span> {
  log.Fatalln(err)
}
<span class="kw">defer</span> resp.Body.Close()</code></pre>
<p>We actually want data from a JSON service, so we will need to decode the JSON. Forunately the <code>resp.Body</code> value implements <a href="http://golang.org/pkg/io/#Reader"><code>io.Reader</code></a> so it can be simply read. <code>io.Reader</code> is the common language of reading any stream, and of course the <a href="http://golang.org/pkg/encoding/json/">JSON</a> package supports it.</p>
<p>All we need to do is to know what we are decoding and create a type to receive that data, which is explained well in <a href="http://blog.golang.org/json-and-go">this article about JSON with Go</a>. In our example case, we are using data from <a href="https://foaas.herokuapp.com/">FOAAS</a>, which looks like this:</p>
<pre class="sourceCode json"><code class="sourceCode json">{
  <span class="dt">&quot;message&quot;</span>:<span class="st">&quot;A message&quot;</span>,
  <span class="dt">&quot;subtitle&quot;</span>:<span class="st">&quot;A subtitle&quot;</span>
}</code></pre>
<p>This easily translates into a Go struct type like:</p>
<pre class="sourceCode go"><code class="sourceCode go"><span class="kw">type</span> Fo <span class="kw">struct</span> {
  Message <span class="dt">string</span>
  Subtitle <span class="dt">string</span>
}</code></pre>
<p>Once we have this, we can easily decode our response straight into a pointer to our struct. We create the decoder from the reader, an instance of the struct, then call <code>Decode</code>.</p>
<pre class="sourceCode go"><code class="sourceCode go">decoder := json.NewDecoder(resp.Body)
v := Fo{}
err = decoder.Decode(&amp;v)
<span class="kw">if</span> err != <span class="ot">nil</span> {
  log.Fatalln(err)
}</code></pre>
<p>Finally we print out our struct. This uses the default <code>String()</code> but you can easily attach your own for custom printing.</p>
<pre><code>2013/08/26 13:37:56 {Ali, Thou clay-brained guts, thou knotty-pated fool, thou
whoreson obscene greasy tallow-catch! - Hilda}</code></pre>
<p>That’s it. It might seem a bit verbose compared to other languages, but we have done some interesting things that might have been a bit of a pain elsewhere:</p>
<ol style="list-style-type: decimal">
<li>Added a header to an HTTP request</li>
<li>Decoded JSON into an instance</li>
<li>Checked every error and responded appropriately</li>
</ol>
<p>I think for doing all that, it is pretty concise. Complete code follows:</p>
<pre class="sourceCode go"><code class="sourceCode go"><span class="kw">package</span> main

<span class="kw">import</span> (
  <span class="st">&quot;encoding/json&quot;</span>
  <span class="st">&quot;net/http&quot;</span>
  <span class="st">&quot;log&quot;</span>
)

<span class="kw">const</span> url = <span class="st">&quot;https://foaas.herokuapp.com/shakespeare/Ali/Hilda&quot;</span>

<span class="kw">type</span> Fo <span class="kw">struct</span> {
  Message  <span class="dt">string</span>
  Subtitle <span class="dt">string</span>
}

<span class="kw">func</span> main() {
  client := &amp;http.Client{}
  req, err := http.NewRequest( <span class="st">&quot;GET&quot;</span>, url , <span class="ot">nil</span>)
  <span class="kw">if</span> err != <span class="ot">nil</span> {
    log.Fatalln(err)
  }
  req.Header.Add(<span class="st">&quot;Accept&quot;</span>, <span class="st">&quot;application/json&quot;</span>)
  resp, err := client.Do(req)
  <span class="kw">if</span> err != <span class="ot">nil</span> {
    log.Fatalln(err)
  }
  <span class="kw">defer</span> resp.Body.Close()
  decoder := json.NewDecoder(resp.Body)
  v := Fo{}
  err = decoder.Decode(&amp;v)
  <span class="kw">if</span> err != <span class="ot">nil</span> {
    log.Fatalln(err)
  }
  log.Println(v)
}</code></pre>]]></summary>
</entry>
<entry>
    <title>I moved my blog</title>
    <link href="http://jaspervdj.be/posts/2013-07-23-i-moved-my-blog.html" />
    <id>http://jaspervdj.be/posts/2013-07-23-i-moved-my-blog.html</id>
    <published>2013-07-23T00:00:00Z</published>
    <updated>2013-07-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I moved my blog. Or more accurately, I am continuing my blog here, using <a href="http://jaspervdj.be/hakyll/">Hakyll</a>. After 8 or whatever years, I got fed up of typing text into a browser – who knew it would take so long? This post is actually typed with Markdown, and I get syntax highlighting for free too.</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="kw">for</span> i in <span class="dt">xrange</span>(<span class="dv">20</span>):
  <span class="kw">print</span> <span class="st">&#39;Rejoice!&#39;</span></code></pre>
<p>You can check out my previous blog at <a href="http://unpythonic.blogspot.com/">http://unpythonic.blogspot.com/</a> – cool address, I know, sad to lose it, but did I mention I was typing code into a <code class="sourceCode html"><span class="kw">&lt;textarea&gt;</span></code>?</p>]]></summary>
</entry>
<entry>
    <title>Building a Haskell web app with Snap</title>
    <link href="http://jaspervdj.be/posts/2012-11-26-snap-quickstart-guide.html" />
    <id>http://jaspervdj.be/posts/2012-11-26-snap-quickstart-guide.html</id>
    <published>2012-11-26T00:00:00Z</published>
    <updated>2012-11-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’m a Haskell newbie, and it’s fun. I thought I’d document my adventures. Starting with my attempt to build a web app. I could have spent months picking a web framework. There are decent comparisons on the web. I picked <a href="http://snapframework.com">Snap</a>, because of the name (and perhaps some advice from a geeky friend of mine). I’ve written web frameworks (in Python) and the intro to Snap caught my eye. All pretty arbitrary reasons, so let’s get started.</p>
<p>First there is a quickstart guide. Great, who doesn’t love quickstart guides? It tells me how to install the framework, though that redirects me to another page, but I don’t mind. I would have to have Cabal installed, otherwise it wouldn’t work. Instead of just plain:</p>
<pre><code>cabal install snap</code></pre>
<p>I do:</p>
<pre><code>cabal install --user --prefix=$HOME snap</code></pre>
<p>Which seems the most convenient way to put things in my ~ tree rather than anywhere on the system. Great it works first time with no dependency issues, conflicts, or compile errors. That’s pretty rare, so great start!</p>
<p>I start to follow the quickstart guide. First create a directory, then call:</p>
<pre><code>snap init barebones</code></pre>
<p>This is great too, so we have a utility script to perform basic operations (as any decent web framework should), and by the look of “barebones” it seems that there are multiple possible templates to start from. Another great feature. The guide suggests running</p>
<pre><code>snap init -h</code></pre>
<p>To see the list of templates, and here they are:</p>
<pre><code>snap init [type]

    [type] can be one of:
    default   - A default project using snaplets and heist
    barebones - A barebones project with minimal dependencies
    tutorial  - The literate Haskell tutorial project</code></pre>
<p>So three starter templates, one of which is a tutorial. So, two starter templates: “barebones” and “default”. I guess we will use default in the future when writing a real app, with Snaplets. I won’t have much cause to write my own templates, I hope, so moving on.</p>
<p>The guide doesn’t explain much what it created, but my tree looks like this now:</p>
<pre><code>./log
./log/access.log
./snaptest.cabal
./src
./src/Main.hs
./.ghci</code></pre>
<p>Pretty much nothing there except Main.hs, which looks like this:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import</span>           Control.Applicative
<span class="kw">import</span>           Snap.Core
<span class="kw">import</span>           Snap.Util.FileServe
<span class="kw">import</span>           Snap.Http.Server

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> quickHttpServe site

<span class="ot">site ::</span> <span class="dt">Snap</span> ()
site <span class="fu">=</span>
    ifTop (writeBS <span class="st">&quot;hello world&quot;</span>) <span class="fu">&lt;|&gt;</span>
    route [ (<span class="st">&quot;foo&quot;</span>, writeBS <span class="st">&quot;bar&quot;</span>)
          , (<span class="st">&quot;echo/:echoparam&quot;</span>, echoHandler)
          ] <span class="fu">&lt;|&gt;</span>
    dir <span class="st">&quot;static&quot;</span> (serveDirectory <span class="st">&quot;.&quot;</span>)

<span class="ot">echoHandler ::</span> <span class="dt">Snap</span> ()
echoHandler <span class="fu">=</span> <span class="kw">do</span>
    param <span class="ot">&lt;-</span> getParam <span class="st">&quot;echoparam&quot;</span>
    maybe (writeBS <span class="st">&quot;must specify echo/param in URL&quot;</span>)
          writeBS param</code></pre>
<p>It reads nicely, don’t you think?</p>
<ul>
<li>Some imports</li>
<li>A main function that serves the site</li>
<li>A site function that returns some Snap, Snap looking like a monad. This is the part that I don’t exactly get: &lt;|&gt; anyone?. We are obviously defining routes, and I am guessing there are 3 ways of hitting this site (This is possibly a bit too much information for a quickstart, I might be happier with just the echo handler, but maybe that isn’t possible on its own. Doesn’t matter though):</li>
<li><code>/</code> – (ifTop, I’m guessing for the root) where we just return “hello world”</li>
<li><code>/foo</code> – which just returns “bar”</li>
<li><code>/echo/&lt;something&gt;</code> – which echoes the something back at us</li>
<li>The echo handler itself, which gets the parameter defined in the route and returns it. Not exactly sure what the maybe line is doing here. I guess it is a failure condition, though I am more used to frameworks where a missing echoparam would not match the route and just 404.</li>
</ul>
<p>Because the snap utility created a cabal file for us (how convenient), I can just install the app with:</p>
<pre><code>cabal install --user --prefix=$HOME</code></pre>
<p>That’s right, my app is an executable, now installed, which I can just run. That’s pretty awesome, we don’t have stuff like that in Python frameworks. I had called my initial directory snaptest and that is how the executable comes out. Let’s run it:</p>
<pre><code>$ snaptest -p 8000
Listening on http://0.0.0.0:8000/</code></pre>
<p>And here is what we get:</p>
<pre><code>http://localhost:8000/
hello world

http://localhost:8000/foo
bar

http://localhost:8000/echo
No handler accepted echo

http://localhost:8000/echo/banana
banana</code></pre>
<p>Great, as we mostly imagined, except I can’t make the maybe condition in the echo handler happen, but I don’t care much either. After maybe 256 seconds of actual effort and 16 minutes after deciding to write a Haskell web app, I have one.</p>
<p>This is the best quick start experience I have had for any web application framework in any language, so things bode well for the future.</p>]]></summary>
</entry>
<entry>
    <title>Keeping tallies in Python</title>
    <link href="http://jaspervdj.be/posts/2012-07-25-keeping-tallies-in-python.html" />
    <id>http://jaspervdj.be/posts/2012-07-25-keeping-tallies-in-python.html</id>
    <published>2012-07-25T00:00:00Z</published>
    <updated>2012-07-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Python’s collections module has some of the most consistently useful collection data structures you will need for everyday programming. Here’s one I didn’t know about, <a href="http://docs.python.org/2/library/collections.html#collections.Counter">collections.Counter</a> (Python 2.7 only!). It is designed to keep “tallies” or count instances of something. The example will make it all clear:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="ch">from</span> collections <span class="ch">import</span> Counter
cars = Counter()
<span class="co"># I see one go past, it is red</span>
cars[<span class="st">&#39;red&#39;</span>] += <span class="dv">1</span>
<span class="co"># And a green one</span>
cars[<span class="st">&#39;blue&#39;</span>] += <span class="dv">1</span>
<span class="co"># etc</span></code></pre>
<p>This is pretty much like a defaultdict with an integer value, but it is convenient and neat, with a useful constructor.</p>
<p>There’s more. “Are two strings anagrams?”</p>
<pre class="sourceCode python"><code class="sourceCode python">are_anagrams = <span class="kw">lambda</span> s1, s2: Counter(s1) == Counter(s2)</code></pre>
<p>Replied the smartass.</p>]]></summary>
</entry>
<entry>
    <title>Watching a file system directory with inotify and Linux</title>
    <link href="http://jaspervdj.be/posts/2012-07-19-watching-filesystem-directory-inotify-linux.html" />
    <id>http://jaspervdj.be/posts/2012-07-19-watching-filesystem-directory-inotify-linux.html</id>
    <published>2012-07-19T00:00:00Z</published>
    <updated>2012-07-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p>“Inotify is a Linux kernel subsystem that acts to extend filesystems to notice changes to the filesystem, and report those changes to applications.”</p>
</blockquote>
<p><a href="http://en.wikipedia.org/wiki/Inotify">[Citation Needed]</a></p>
<p>You can use this service from Python using <a href="http://twistedmatrix.com/trac/">Twisted</a> to watch a directory and its contents. Twisted is perfect for this as you likely want to be doing a number of other things at the same time, for example, making an HTTP request every time a change is noticed. The code is so monstrously simple, I will just paste it below.</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="ch">from</span> twisted.internet <span class="ch">import</span> inotify
<span class="ch">from</span> twisted.python <span class="ch">import</span> filepath

<span class="kw">class</span> FileSystemWatcher(<span class="dt">object</span>):

  <span class="kw">def</span> <span class="ot">__init__</span>(<span class="ot">self</span>, path_to_watch):
    <span class="ot">self</span>.path = path_to_watch

  <span class="kw">def</span> Start(<span class="ot">self</span>):
    notifier = inotify.INotify()
    notifier.startReading()
    notifier.watch(filepath.FilePath(<span class="ot">self</span>.path),
                   callbacks=[<span class="ot">self</span>.OnChange])

  <span class="kw">def</span> OnChange(<span class="ot">self</span>, watch, path, mask):
    <span class="kw">print</span> path, <span class="st">&#39;changed&#39;</span> <span class="co"># or do something else!</span>

<span class="kw">if</span> <span class="dt">__name__</span> == <span class="st">&#39;__main__&#39;</span>:
  <span class="ch">from</span> twisted.internet <span class="ch">import</span> reactor
  fs = FileSystemWatcher(<span class="st">&#39;/home/ali/tmp&#39;</span>)
  fs.Start()
  reactor.run()</code></pre>
<p>Incredibly easy, and another example of how awesome Twisted is.</p>]]></summary>
</entry>
<entry>
    <title>Calling the Google Drive API and other Google APIs asynchronously with Twisted</title>
    <link href="http://jaspervdj.be/posts/2012-07-06-calling-google-drive-api-asynchronously-with-twisted.html" />
    <id>http://jaspervdj.be/posts/2012-07-06-calling-google-drive-api-asynchronously-with-twisted.html</id>
    <published>2012-07-06T00:00:00Z</published>
    <updated>2012-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>You may know that the <a href="https://code.google.com/p/google-api-python-client/">Google API Python Client</a> is built on <a href="https://code.google.com/p/httplib2/">httplib2</a>. This is a reasonable general choice, but the tight coupling is unhelpful in situations where a different HTTP library, or an entirely different approach to network programming should be used. An example of this is <a href="http://twistedmatrix.com/trac/">Twisted</a>.</p>
<p>I won’t be going on about how awesome Twisted is, but let’s just take it for granted that it is so awesome that I could not write this particular application without it.</p>
<p>Httplib2 is blocking, and that makes it incompatible with being run inside the Twisted reactor. Fortunately we are only the latest person to have this problem, and a solution exists, <a href="http://twistedmatrix.com/documents/current/api/twisted.internet.threads.deferToThread.html">twisted.internet.threads.deferToThread</a>.</p>
<pre class="sourceCode python"><code class="sourceCode python">api_call = drive.files().<span class="dt">list</span>()

<span class="kw">def</span> on_list(resp):
  <span class="kw">for</span> item in resp[<span class="st">&#39;items&#39;</span>]:
    <span class="kw">print</span> item[<span class="st">&#39;title&#39;</span>]

d = deferToThread(api_call.execute)
d.addCallback(on_list)</code></pre>
<p>A blocking call will be made in a thread and will callback on the returned deferred when it is done. I appreciate that no one<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup> is 100% happy with this solution.</p>
<blockquote>
<p>“Argh, threads!”, “Argh, async!”</p>
</blockquote>
<p>But it is a testament to the Greatness of Twisted that it has this sort of facility to play well with other, less flexible, systems.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Did I mention? I am 100% happy.<a href="#fnref1">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>

</feed>
